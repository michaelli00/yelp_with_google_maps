{"version":3,"sources":["Map.js","MyMap.js","Item.js","List.js","App.js","serviceWorker.js","index.js"],"names":["mapStyles","position","width","height","CurrentLocation","props","initialCenter","lat","lng","state","currentLocation","this","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","loadMap","prevProps","prevState","google","recenterMap","map","current","maps","center","LatLng","panTo","mapRef","refs","node","ReactDOM","findDOMNode","zoom","mapConfig","Object","assign","Map","children","React","Children","c","cloneElement","mapCenter","style","ref","renderChildren","Component","defaultProps","visible","MyMap","onMarkerClick","marker","e","selectedPlace","activeMarker","showingInfoWindow","onClose","createMarkers","data","business","name","coordinates","image_url","url","location","display_phone","address","address1","city","zip_code","onClick","src","locationUrl","phone","href","alt","hash","icon","GoogleApiWrapper","apiKey","Item","className","rating","starDimension","starSpacing","starRatedColor","List","renderList","businesses","id","key","onMouseEnter","selected","onMouseOver","onHover","filterList","event","updatedList","initialBusinesses","filter","toLowerCase","search","target","value","callBack","listLength","length","type","placeholder","onChange","App","initialData","currLat","toString","currLng","fetch","method","headers","then","response","json","result","catch","error","console","log","Boolean","window","hostname","match","render","document","getElementById"],"mappings":"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","file":"static/js/main.a0b5aa41.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%'\n  }\n};\n\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { lat, lng } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n    this.loadMap();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n\n      // reference to the actual DOM element\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      let { zoom } = this.props;\n      const { lat, lng } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: zoom\n        }\n      );\n\n      // maps.Map() is constructor that instantiates the map\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const { children } = this.props;\n\n    if (!children) return;\n\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n     const style = Object.assign({}, mapStyles.map);\n    return (\n      <div>\n        <div style={style} ref=\"map\">\n          Loading map...\n        </div>\n        {this.renderChildren()}\n      </div>\n    );\n  }\n}\nexport default CurrentLocation;\n\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: -1.2884,\n    lng: 36.8233\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};\n","import React, { Component } from 'react';\nimport { GoogleApiWrapper, Marker, InfoWindow } from 'google-maps-react';\nimport CurrentLocation from './Map';\n\nclass MyMap extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      hash: {}\n    }\n  }\n\n  onMarkerClick = (props, marker, e) =>{\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n  }\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n  \n  createMarkers = () => {\n    return this.props.data.map(business => {\n      const {name, coordinates, image_url, url, location, display_phone} = business;\n      const address = location.address1 + \", \" + location.city + \", \" + location.state + \", \" + location.zip_code;\n        return ( \n          [ \n            <Marker\n              position={{lat:coordinates.latitude,lng:coordinates.longitude}}\n              onClick={this.onMarkerClick}\n              name={name}\n              url={url}\n              src={image_url}\n              location={address}\n              locationUrl={\"https://maps.google.com/?q=\" + address}\n              phone={display_phone}\n            />\n            ,\n            <InfoWindow\n              marker={this.state.activeMarker}\n              visible={this.state.showingInfoWindow}\n              onClose={this.onClose}\n            >\n              <div>\n                <h4>{this.state.selectedPlace.name}</h4>\n                <a href={this.state.selectedPlace.url}>Yelp Review</a>\n                <p>{this.state.selectedPlace.location}</p>\n                <p>{this.state.selectedPlace.phone}</p>\n                <center>\n                  <img src={this.state.selectedPlace.src} alt={this.state.selectedPlace.name} width=\"150px\" height=\"150px\"/>\n                </center>\n              </div>\n            </InfoWindow>\n         ]\n      )\n    })\n  }\n\n  render() {\n    return (\n      <CurrentLocation\n        centerAroundCurrentLocation\n        google={this.props.google}\n      >\n        {this.createMarkers()}\n        <Marker icon=\"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\" onClick={this.onMarkerClick} name={'current location'} />\n      </CurrentLocation>\n    );\n  }\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDHV73IxKgp1-FH1YE4SFKJQeb5eAXEifI'\n})(MyMap);\n","import React from 'react';\nimport './Item.css';\nimport StarRatings from 'react-star-ratings';\n\nclass Item extends React.Component {\n  render() {\n    return (\n      <div className=\"row\">\n        <div>{this.props.name}</div>\n        <div>\n          <StarRatings className=\"star\" \n            rating={this.props.rating}\n            starDimension=\"20px\"\n            starSpacing=\"0px\"\n            starRatedColor=\"#00BFFF\"\n          />\n        </div>\n      </div>\n    )\n  }\n}\nexport default Item\n","import React from 'react';\nimport Item from './Item';\nimport './List.css';\n\nclass List extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      initialBusinesses: this.props.data,\n      businesses: [],\n      selected: null\n    }\n  }\n\n  componentDidMount() {\n    this.setState({businesses: this.state.initialBusinesses});\n  }\n\n  renderList = () => {\n    return this.state.businesses.map(business => {\n      const {id,name,rating} = business;\n      return (\n        <div className=\"item\" key={id} onMouseEnter={() => this.setState({selected: id})}>\n          <Item key={id} name={name} rating={rating} onMouseOver={this.onHover}/>\n        </div>\n      )\n    }\n    )\n  }\n\n  filterList = (event) => {\n    let updatedList = this.state.initialBusinesses;\n    updatedList = updatedList.filter(business => {\n      return business.name.toLowerCase().search(\n        event.target.value.toLowerCase()) !== -1;\n    });\n    this.setState({businesses: updatedList});\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState && prevState.businesses !== this.state.businesses) {\n      this.props.callBack(this.state.businesses, this.state.selected);\n    }\n  }\n\n  render() {\n    let listLength = this.state.businesses.length;\n    return (\n      <div className=\"list\">\n        <h2>{listLength} {listLength > 1 || listLength === 0 ? \" results\" : \" result\"}</h2>\n        <input className=\"searchBar\"\n          type=\"text\"\n          placeholder=\"Search\"\n          onChange={this.filterList}\n        />\n        {this.renderList()}\n      </div>\n    )\n  }\n}\nexport default List;\n","import React from 'react';\nimport MyMap from './MyMap';\nimport List from './List';\nimport './App.css';\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      initialData: null,\n      data: null,\n      lat: null,\n      lng: null,\n      id: null\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        position => {\n          const currLat = position.coords.latitude.toString();\n          const currLng = position.coords.longitude.toString();\n          var requestOptions = {\n            method: 'GET',\n            headers: {\n              'Authorization': 'Bearer GZwAGFbMbXiNldKLln53GoRc92aTrl0ZJrxQsCBop0K0v-Cv2fKLfjz4By6NJpybxPaRjar9DwsUDhIg0xw0Qix05xOIfUrw5TQOiNTK6uNMTikAmmstWTdCiB1XXnYx',\n              'Access-Control-Allow-Origin': '*'\n            }\n          };\n          fetch(\"https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=food&latitude=\"+currLat+\"&longitude=\"+currLng+\"&limit=50\", requestOptions)\n            .then(response => response.json())\n            .then(result => this.setState({initialData: result.businesses, data: result.businesses}))\n            .catch(error => console.log('error', error));\n          this.setState({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n        }\n      )\n    }\n  }\n\n  callBack = (business, id) => {\n    this.setState({data: business});\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.data && this.state.lat && this.state.lng ? \n          (\n            <div className=\"col\">\n              <List className=\"list\" data={this.state.data} callBack={this.callBack}/>\n              <MyMap className=\"map\" lat={this.state.lat} lng={this.state.lng} data={this.state.data}/>\n            </div>\n          ) : null\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}